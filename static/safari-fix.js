var context,processor,AudioContext=window.AudioContext||window.webkitAudioContext;function createWorker(e){var t=e.toString().replace(/^function\s*\(\)\s*{/,"").replace(/}$/,""),r=new Blob([t]);return new Worker(URL.createObjectURL(r))}function error(e){var t=new Event("error");return t.data=new Error("Wrong state for "+e),t}function MediaRecorder(e){this.stream=e,this.state="inactive",this.em=document.createDocumentFragment(),this.encoder=createWorker(MediaRecorder.encoder);var r=this;this.encoder.addEventListener("message",function(e){var t=new Event("dataavailable");t.data=new Blob([e.data],{type:r.mimeType}),r.em.dispatchEvent(t),"inactive"===r.state&&r.em.dispatchEvent(new Event("stop"))})}MediaRecorder.prototype={mimeType:"audio/wav",start:function(e){if("inactive"!==this.state)return this.em.dispatchEvent(error("start"));this.state="recording",context=context||new AudioContext,this.clone=this.stream.clone();var t=context.createMediaStreamSource(this.clone);processor=processor||context.createScriptProcessor(2048,1,1);var r=this;processor.onaudioprocess=function(e){"recording"===r.state&&r.encoder.postMessage(["encode",e.inputBuffer.getChannelData(0)])},t.connect(processor),processor.connect(context.destination),this.em.dispatchEvent(new Event("start")),e&&(this.slicing=setInterval(function(){"recording"===r.state&&r.requestData()},e))},stop:function(){return"inactive"===this.state?this.em.dispatchEvent(error("stop")):(this.requestData(),this.state="inactive",this.clone.getTracks().forEach(function(e){e.stop()}),clearInterval(this.slicing))},pause:function(){return"recording"!==this.state?this.em.dispatchEvent(error("pause")):(this.state="paused",this.em.dispatchEvent(new Event("pause")))},resume:function(){return"paused"!==this.state?this.em.dispatchEvent(error("resume")):(this.state="recording",this.em.dispatchEvent(new Event("resume")))},requestData:function(){return"inactive"===this.state?this.em.dispatchEvent(error("requestData")):this.encoder.postMessage(["dump",context.sampleRate])},addEventListener:function(){this.em.addEventListener.apply(this.em,arguments)},removeEventListener:function(){this.em.removeEventListener.apply(this.em,arguments)},dispatchEvent:function(){this.em.dispatchEvent.apply(this.em,arguments)}},MediaRecorder.isTypeSupported=function(e){return/audio\/wave?/.test(e)},MediaRecorder.notSupported=!navigator.mediaDevices||!AudioContext,MediaRecorder.encoder=require("./wave-encoder"),module.exports=MediaRecorder;